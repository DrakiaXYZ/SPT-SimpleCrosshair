<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <TargetFramework>net471</TargetFramework>
    <AssemblyName>SimpleCrosshair</AssemblyName>
    <Description>A simple pointfire crosshair</Description>
    <LangVersion>7.3</LangVersion>
    <Nullable>disable</Nullable>
    <Deterministic>true</Deterministic>
  </PropertyGroup>

  <PropertyGroup>
    <TarkovDir Condition=" '$(TarkovDir)' == '' ">D:\Games\SPTarkov-3.9.0\</TarkovDir>
    <TarkovDebugDir Condition=" '$(TarkovDebugDir)' == '' ">D:\Games\SPTarkov-3.9.0-Debug\</TarkovDebugDir>
    <TarkovManagedDir>$(TarkovDir)EscapeFromTarkov_Data\Managed\</TarkovManagedDir>
    <TarkovBepInExCoreDir>$(TarkovDir)BepInEx\core\</TarkovBepInExCoreDir>
    <TarkovBepInExSptDir>$(TarkovDir)BepInEx\plugins\spt\</TarkovBepInExSptDir>
  </PropertyGroup>

  <ItemGroup>
    <Reference Include="Assembly-CSharp">
      <HintPath>$(TarkovManagedDir)Assembly-CSharp.dll</HintPath>
    </Reference>
    <Reference Include="Comfort">
      <HintPath>$(TarkovManagedDir)Comfort.dll</HintPath>
    </Reference>
    <Reference Include="DOTween">
      <HintPath>$(TarkovManagedDir)DOTween.dll</HintPath>
    </Reference>
    <Reference Include="DOTween.Modules">
      <HintPath>$(TarkovManagedDir)DOTween.Modules.dll</HintPath>
    </Reference>
    <Reference Include="Sirenix.Serialization">
      <HintPath>$(TarkovManagedDir)Sirenix.Serialization.dll</HintPath>
    </Reference>
    <Reference Include="Unity.TextMeshPro">
      <HintPath>$(TarkovManagedDir)Unity.TextMeshPro.dll</HintPath>
    </Reference>
    <Reference Include="UnityEngine">
      <HintPath>$(TarkovManagedDir)UnityEngine.dll</HintPath>
    </Reference>
    <Reference Include="UnityEngine.CoreModule">
      <HintPath>$(TarkovManagedDir)UnityEngine.CoreModule.dll</HintPath>
    </Reference>
    <Reference Include="UnityEngine.PhysicModule">
      <HintPath>$(TarkovManagedDir)UnityEngine.PhysicsModule.dll</HintPath>
    </Reference>
    <Reference Include="UnityEngine.ImageConversionModule">
      <HintPath>$(TarkovManagedDir)UnityEngine.ImageConversionModule.dll</HintPath>
    </Reference>
    <Reference Include="UnityEngine.InputLegacyModule">
      <HintPath>$(TarkovManagedDir)UnityEngine.InputLegacyModule.dll</HintPath>
    </Reference>
    <Reference Include="UnityEngine.IMGUIModule">
      <HintPath>$(TarkovManagedDir)UnityEngine.IMGUIModule.dll</HintPath>
    </Reference>
    <Reference Include="UnityEngine.TextRenderingModule">
      <HintPath>$(TarkovManagedDir)UnityEngine.TextRenderingModule.dll</HintPath>
    </Reference>
    <Reference Include="UnityEngine.UI">
      <HintPath>$(TarkovManagedDir)UnityEngine.UI.dll</HintPath>
    </Reference>
    <Reference Include="UnityEngine.UIModule">
      <HintPath>$(TarkovManagedDir)UnityEngine.UIModule.dll</HintPath>
    </Reference>

    <Reference Include="0Harmony">
      <HintPath>$(TarkovBepInExCoreDir)0Harmony.dll</HintPath>
    </Reference>
    <Reference Include="BepinEx">
      <HintPath>$(TarkovBepInExCoreDir)BepInEx.dll</HintPath>
    </Reference>
    <Reference Include="BepinEx.Preloader">
      <HintPath>$(TarkovBepInExCoreDir)BepInEx.Preloader.dll</HintPath>
    </Reference>

    <Reference Include="spt-reflection">
      <HintPath>$(TarkovBepInExSptDir)spt-reflection.dll</HintPath>
    </Reference>
  </ItemGroup>

  <!-- Gets the commit hash from git -->
  <Target Name="SetSourceRevisionId" BeforeTargets="InitializeSourceControlInformation">
    <Exec
      Command="git describe --long --always --dirty --exclude=* --abbrev=8"
      ConsoleToMSBuild="True"
      IgnoreExitCode="False"
      >
      <Output PropertyName="SourceRevisionId" TaskParameter="ConsoleOutput"/>
    </Exec>
  </Target>

  <!-- Gets the version property from the VERSION.txt file -->
  <Target Name="PreBuild" BeforeTargets="PreBuildEvent">
    <ItemGroup>
      <VersionFile Include="VERSION.txt" />
      <VersionCs Include="$(ProjectDir)Version.cs" />
      <Compile Include="@(VersionCs)" Exclude="@(VersionCs)" /> <!-- Resolves double include -->
      <FileWrites Include="@(VersionCs)" />
    </ItemGroup>

    <ReadLinesFromFile File="@(VersionFile)">
      <Output TaskParameter="Lines" PropertyName="Version" />
    </ReadLinesFromFile>

    <!-- Write the version to Version.cs, kind of a hack to get version info into BepInEx -->
    <WriteLinesToFile File="@(VersionCs)" Overwrite="true" Lines="// HACK: autogenerated file containing version info from VERSION.txt"/>
    <WriteLinesToFile File="@(VersionCs)" Lines="namespace SimpleCrosshair{public static class BuildInfo {public const string Version = &quot;$(Version)&quot;%3B}}"/>
  </Target>

  <Target Name="PostBuild" AfterTargets="PostBuildEvent">
    <ItemGroup>
      <OutputDLL Include="$(ProjectDir)$(OutDir)$(TargetName).dll" />
      <License Include="$(ProjectDir)LICENSE.txt" />
      <Resources Include="$(ProjectDir)Resources\*" />
    </ItemGroup>

    <!-- Copies the output and resources to tarkov game folder -->
    <Copy
      SourceFiles="@(OutputDLL);@(Resources);@(License)"
      DestinationFolder="$(TarkovDir)BepInEx\plugins\SimpleCrosshair"
    />
    <Copy
      SourceFiles="@(OutputDLL);@(Resources);@(License)"
      DestinationFolder="$(TarkovDebugDir)BepInEx\plugins\SimpleCrosshair"
    />

    <!-- Creates a release zip file -->
    <RemoveDir Directories="$(ProjectDir)release" />
    <Copy
      SourceFiles="@(OutputDLL);@(Resources);@(License)"
      DestinationFolder="$(ProjectDir)release\SimpleCrosshair\BepInEx\plugins\SimpleCrosshair"
    />
    <ZipDirectory
      SourceDirectory="$(ProjectDir)release\SimpleCrosshair\"
      DestinationFile="$(ProjectDir)release\SimpleCrosshair-$(Version)-$(SourceRevisionId).zip"
    />
  </Target>

</Project>
